#!/bin/bash
#
# This script configures Zulip secrets for Cloud Run deployment
# It reads environment variables and creates the zulip-secrets.conf file

set -euo pipefail

SECRETS_FILE="/etc/zulip/zulip-secrets.conf"

echo "Configuring Zulip secrets for Cloud Run deployment..."

# Debug: Show available environment variables
echo "Available environment variables:"
env | grep -E "(POSTGRES|ZULIP|SHARED)" || echo "No relevant environment variables found"

# Ensure the /etc/zulip directory exists
sudo mkdir -p /etc/zulip

# Create zulip-secrets.conf with required secrets
sudo tee "$SECRETS_FILE" > /dev/null << EOF
[secrets]
# PostgreSQL database password
postgres_password = ${POSTGRES_PASSWORD:-}

# Django secret key - auto-generated if not provided
secret_key = ${ZULIP_SECRETS_KEY:-$(python3 -c "import secrets; print(secrets.token_urlsafe(50))")}

# Shared secret for internal communication - use environment variable or generate
shared_secret = ${SHARED_SECRET:-$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")}

# Email configuration
email_password = ${EMAIL_PASSWORD:-}

# Social authentication secrets (optional)
social_auth_github_secret = ${GITHUB_CLIENT_SECRET:-}
social_auth_google_secret = ${GOOGLE_CLIENT_SECRET:-}

# File upload secrets (optional)
s3_secret_key = ${S3_SECRET_KEY:-}

# Push notification secrets (optional)
zulip_org_id = ${ZULIP_ORG_ID:-}
zulip_org_key = ${ZULIP_ORG_KEY:-}

# Caching and messaging passwords
memcached_password = ${MEMCACHED_PASSWORD:-}
rabbitmq_password = ${RABBITMQ_PASSWORD:-$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")}
redis_password = ${REDIS_PASSWORD:-}

# Additional secrets for production
camo_key = ${CAMO_KEY:-$(python3 -c "import secrets; print(secrets.token_hex(32))")}
initial_password_salt = ${INITIAL_PASSWORD_SALT:-$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")}
EOF

echo "Secrets file configured successfully."

# Debug: Show what was written to the secrets file
echo "Contents of secrets file:"
sudo cat "$SECRETS_FILE" | grep -E "(shared_secret|secret_key|postgres_password)" || echo "No secrets found in file"

# Set proper ownership and permissions (secrets file should be readable only by zulip user)
sudo chown zulip:zulip "$SECRETS_FILE"
sudo chmod 640 "$SECRETS_FILE"

echo "Secrets file created with proper permissions."

# Validate that required secrets are present
echo "Validating required secrets..."

if [ -z "${POSTGRES_PASSWORD:-}" ]; then
    echo "WARNING: POSTGRES_PASSWORD environment variable is not set!"
    echo "Database connection may fail without this credential."
fi

if [ -z "${ZULIP_SECRETS_KEY:-}" ]; then
    echo "INFO: ZULIP_SECRETS_KEY not provided, auto-generated Django secret key."
fi

if [ -z "${SHARED_SECRET:-}" ]; then
    echo "INFO: SHARED_SECRET not provided, auto-generated shared secret."
fi

# Verify that the secrets file was created and contains the required secrets
echo "Verifying secrets file contents..."
if [ -f "$SECRETS_FILE" ]; then
    echo "Secrets file created successfully at $SECRETS_FILE"
    
    # Check if shared_secret is present and not empty
    if grep -q "shared_secret" "$SECRETS_FILE" && ! grep -q "shared_secret = $" "$SECRETS_FILE"; then
        echo "✅ shared_secret is properly configured"
    else
        echo "❌ shared_secret is missing or empty in secrets file"
        exit 1
    fi
    
    # Check if secret_key is present and not empty
    if grep -q "secret_key" "$SECRETS_FILE" && ! grep -q "secret_key = $" "$SECRETS_FILE"; then
        echo "✅ secret_key is properly configured"
    else
        echo "❌ secret_key is missing or empty in secrets file"
        exit 1
    fi
else
    echo "❌ Secrets file was not created at $SECRETS_FILE"
    exit 1
fi

echo "Secret configuration completed successfully."
