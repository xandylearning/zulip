#!/bin/bash
#
# This script configures Zulip settings for Cloud Run deployment
# It reads environment variables and configures the appropriate settings files

set -euo pipefail

# Zulip expects prod_settings.py to be in the zproject directory
SETTINGS_FILE="/root/zulip/zproject/prod_settings.py"
ZULIP_CONF="/etc/zulip/zulip.conf"

echo "Configuring Zulip for Cloud Run deployment..."

# Ensure the /etc/zulip directory exists
sudo mkdir -p /etc/zulip

# Create or update zulip.conf for production deployment
sudo tee "$ZULIP_CONF" > /dev/null << EOF
[machine]
deploy_type = production

[postgresql]
database_name = zulip
database_user = zulip
missing_dictionaries = true
EOF

# Create or update prod_settings.py
# Use a more targeted approach that leverages Zulip's existing configuration system
sudo tee "$SETTINGS_FILE" > /dev/null << 'EOF'
# Zulip Cloud Run Configuration
# This file is auto-generated by the Cloud Run deployment process

# Import the base template with all standard Zulip production settings
from zproject.prod_settings_template import *  # noqa: F403 isort: skip

import os
import logging

# Configure external hostname from Cloud Run environment
EXTERNAL_HOST = os.environ.get('EXTERNAL_HOST', 'localhost')

# Configure database connection for Cloud Run by setting the appropriate variables
# that Zulip's computed_settings.py will recognize

if os.environ.get('CLOUDSQL_INSTANCE'):
    # For Cloud SQL Unix socket approach
    logging.info("Configuring Cloud SQL Unix socket connection")
    
    # Set REMOTE_POSTGRES_HOST to the Cloud SQL socket path
    # This will be picked up by computed_settings.py
    REMOTE_POSTGRES_HOST = f"/cloudsql/{os.environ['CLOUDSQL_INSTANCE']}"
    REMOTE_POSTGRES_PORT = ""  # No port for Unix socket
    REMOTE_POSTGRES_SSLMODE = "disable"  # SSL not needed for Unix socket
    
elif os.environ.get('POSTGRES_HOST'):
    # For direct TCP connection
    logging.info("Configuring direct TCP connection to PostgreSQL")
    
    REMOTE_POSTGRES_HOST = os.environ['POSTGRES_HOST']
    REMOTE_POSTGRES_PORT = int(os.environ.get('POSTGRES_PORT', '5432'))
    REMOTE_POSTGRES_SSLMODE = os.environ.get('POSTGRES_SSLMODE', 'require')
    
else:
    logging.warning("No database configuration found (CLOUDSQL_INSTANCE or POSTGRES_HOST)")
    logging.warning("Will use default local database configuration")

# Security settings for Cloud Run
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Set up allowed hosts from environment
ALLOWED_HOSTS = [
    # Allow Cloud Run service domain
    '.run.app',
    # Allow custom domains  
    '.a.run.app',
    # Allow localhost for development
    'localhost',
    '127.0.0.1',
]

# Add environment-specific allowed hosts
if os.environ.get('ALLOWED_HOSTS'):
    ALLOWED_HOSTS.extend(os.environ['ALLOWED_HOSTS'].split(','))

# Configure logging for Cloud Run (logs go to stdout/stderr)
LOGGING_CONFIG = None
import logging.config
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

# Additional Cloud Run optimizations
# Disable features that don't work well in serverless environments
ZULIP_SERVICE_PUSH_NOTIFICATIONS = False
ZULIP_SERVICE_SUBMIT_USAGE_STATISTICS = False

# Email configuration (can be overridden by environment variables)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EOF

echo "Cloud Run settings configured successfully."

# Debug: Show what environment variables are available
echo "Debug: Available database environment variables:"
env | grep -E "(POSTGRES|CLOUDSQL|EXTERNAL_HOST)" || echo "No database environment variables found"

# Set proper ownership and permissions
sudo chown zulip:zulip "$SETTINGS_FILE" "$ZULIP_CONF"
sudo chmod 644 "$SETTINGS_FILE" "$ZULIP_CONF"

echo "Settings files created with proper permissions."

# Debug: Show what was written to the settings file
echo "Contents of prod_settings.py:"
echo "============================"
head -20 "$SETTINGS_FILE"
echo "============================"
