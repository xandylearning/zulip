#!/bin/bash
#
# Debug script to verify Cloud Run database configuration
# This script helps troubleshoot database connection issues

set -euo pipefail

echo "=== Cloud Run Database Configuration Debug ==="
echo "$(date): Starting database configuration debug"

# Check environment variables
echo ""
echo "=== Environment Variables ==="
echo "ZULIP_ENVIRONMENT: ${ZULIP_ENVIRONMENT:-'Not set'}"
echo "CLOUDSQL_INSTANCE: ${CLOUDSQL_INSTANCE:-'Not set'}"
echo "POSTGRES_HOST: ${POSTGRES_HOST:-'Not set'}"
echo "POSTGRES_PORT: ${POSTGRES_PORT:-'Not set'}"
echo "POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:+'SET (hidden)'}"
echo "POSTGRES_SSLMODE: ${POSTGRES_SSLMODE:-'Not set'}"
echo "REMOTE_POSTGRES_HOST: ${REMOTE_POSTGRES_HOST:-'Not set'}"
echo "REMOTE_POSTGRES_PORT: ${REMOTE_POSTGRES_PORT:-'Not set'}"
echo "REMOTE_POSTGRES_SSLMODE: ${REMOTE_POSTGRES_SSLMODE:-'Not set'}"

# Check configuration files
echo ""
echo "=== Configuration Files ==="

ZULIP_CONF="/etc/zulip/zulip.conf"
if [ -f "$ZULIP_CONF" ]; then
    echo "✅ $ZULIP_CONF exists"
    echo "Contents:"
    cat "$ZULIP_CONF"
else
    echo "❌ $ZULIP_CONF not found"
fi

echo ""
SETTINGS_FILE="/etc/zulip/settings.py"
if [ -f "$SETTINGS_FILE" ]; then
    echo "✅ $SETTINGS_FILE exists"
    echo "Size: $(wc -c < "$SETTINGS_FILE") bytes"
else
    echo "❌ $SETTINGS_FILE not found"
fi

echo ""
SECRETS_FILE="/etc/zulip/zulip-secrets.conf"
if [ -f "$SECRETS_FILE" ]; then
    echo "✅ $SECRETS_FILE exists"
    echo "Size: $(wc -c < "$SECRETS_FILE") bytes"
    # Check for required secrets without exposing values
    if grep -q "^postgres_password" "$SECRETS_FILE"; then
        echo "✅ postgres_password configured"
    else
        echo "❌ postgres_password not found"
    fi
    if grep -q "^secret_key" "$SECRETS_FILE"; then
        echo "✅ secret_key configured"
    else
        echo "❌ secret_key not found"
    fi
else
    echo "❌ $SECRETS_FILE not found"
fi

echo ""
ENV_FILE="/etc/zulip/cloudrun.env"
if [ -f "$ENV_FILE" ]; then
    echo "✅ $ENV_FILE exists"
    echo "Contents:"
    cat "$ENV_FILE"
else
    echo "❌ $ENV_FILE not found"
fi

# Check Cloud SQL socket path
echo ""
echo "=== Cloud SQL Socket Check ==="
if [ -n "${CLOUDSQL_INSTANCE:-}" ]; then
    SOCKET_PATH="/cloudsql/$CLOUDSQL_INSTANCE"
    if [ -S "$SOCKET_PATH/.s.PGSQL.5432" ]; then
        echo "✅ Cloud SQL socket found at $SOCKET_PATH/.s.PGSQL.5432"
    elif [ -d "$SOCKET_PATH" ]; then
        echo "⚠️  Cloud SQL directory exists at $SOCKET_PATH but no PostgreSQL socket found"
        echo "Directory contents:"
        ls -la "$SOCKET_PATH" || echo "Cannot list directory contents"
    else
        echo "❌ Cloud SQL socket directory not found at $SOCKET_PATH"
    fi
else
    echo "ℹ️  CLOUDSQL_INSTANCE not set, skipping socket check"
fi

# Test database connection (if Django is available)
echo ""
echo "=== Database Connection Test ==="
if [ -f "/root/zulip/manage.py" ]; then
    echo "Testing database connection..."
    cd /root/zulip
    
    # First try to import Django settings
    if su zulip -c "python3 -c 'import django; django.setup()'" 2>/dev/null; then
        echo "✅ Django settings loaded successfully"
        
        # Try to connect to database
        if su zulip -c "python3 manage.py check --database default" 2>/dev/null; then
            echo "✅ Database connection test passed"
        else
            echo "❌ Database connection test failed"
            echo "Attempting to get more details..."
            su zulip -c "python3 manage.py check --database default" || true
        fi
    else
        echo "❌ Failed to load Django settings"
        echo "Django import error:"
        su zulip -c "python3 -c 'import django; django.setup()'" || true
    fi
else
    echo "❌ Django manage.py not found at /root/zulip/manage.py"
fi

echo ""
echo "=== Debug Complete ==="
echo "$(date): Database configuration debug completed"
