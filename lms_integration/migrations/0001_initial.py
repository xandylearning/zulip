# Generated by Django 5.2.5 on 2025-10-24 11:43

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AdaptiveQuestionPools",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
            options={
                "db_table": "adaptive_question_pools",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Answers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("texthtml", models.TextField(db_column="textHtml")),
                ("iscorrect", models.BooleanField(db_column="isCorrect")),
            ],
            options={
                "db_table": "answers",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Attachments",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("title", models.TextField()),
                ("attachment_url", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("is_renderable", models.BooleanField()),
                ("created", models.DateTimeField()),
                ("modified", models.DateTimeField()),
            ],
            options={
                "db_table": "attachments",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Attempts",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("email", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
                ("correct_answers_count", models.IntegerField(blank=True, null=True)),
                ("incorrect_answers_count", models.IntegerField(blank=True, null=True)),
                ("unanswered_count", models.IntegerField(blank=True, null=True)),
                ("score", models.IntegerField(blank=True, null=True)),
                ("percentage", models.IntegerField(blank=True, null=True)),
                ("percentile", models.FloatField(blank=True, null=True)),
                ("time_taken", models.TextField(blank=True, null=True)),
                ("remaining_time", models.TextField(blank=True, null=True)),
                ("result", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("last_started_time", models.DateTimeField(blank=True, null=True)),
                ("last_answer_updated_time", models.DateTimeField(blank=True, null=True)),
                ("speed", models.IntegerField(blank=True, null=True)),
                ("exam_url", models.TextField(blank=True, null=True)),
                ("user_url", models.TextField(blank=True, null=True)),
                ("username", models.TextField(blank=True, null=True)),
                ("review_pdf_url", models.TextField(blank=True, null=True)),
                ("institute_attempt_id", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "attempts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AttemptSections",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("order", models.IntegerField(blank=True, null=True)),
                ("section_id", models.IntegerField(blank=True, null=True)),
                ("time_taken", models.TextField(blank=True, null=True)),
                ("correct_answers_count", models.IntegerField(blank=True, null=True)),
                ("incorrect_answers_count", models.IntegerField(blank=True, null=True)),
                ("unanswered_count", models.IntegerField(blank=True, null=True)),
                ("score", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "attempt_sections",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Batches",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.TextField(blank=True, null=True)),
                ("url", models.TextField(blank=True, null=True)),
                ("created", models.DateTimeField(blank=True, null=True)),
                ("modified", models.DateTimeField(blank=True, null=True)),
                ("is_local", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "batches",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Batchtostudent",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "_BatchToStudent",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Bookmarks",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
            options={
                "db_table": "bookmarks",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Chaptercontent",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("order", models.IntegerField()),
                ("title", models.TextField()),
                ("free_preview", models.BooleanField()),
                ("url", models.TextField()),
                ("modified", models.DateTimeField()),
                ("start", models.DateTimeField()),
                ("end", models.DateTimeField(blank=True, null=True)),
                ("content_type", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("html_content", models.TextField(blank=True, null=True)),
                ("course_url", models.TextField()),
                ("cover_image", models.TextField()),
                ("cover_image_medium", models.TextField()),
                ("cover_image_small", models.TextField()),
                ("tags", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "ChapterContent",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Chapters",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("order", models.IntegerField()),
                ("name", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("image", models.TextField(blank=True, null=True)),
                ("slug", models.TextField(unique=True)),
                ("created", models.DateTimeField()),
                ("modified", models.DateTimeField()),
                ("required_trophy_count", models.IntegerField()),
            ],
            options={
                "db_table": "chapters",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Chaptertocontent",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("order", models.IntegerField()),
            ],
            options={
                "db_table": "ChapterToContent",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ClassSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("date", models.DateField()),
                ("day", models.CharField(blank=True, max_length=20, null=True)),
                ("grade", models.IntegerField()),
                ("board", models.TextField()),
                ("section", models.CharField(blank=True, max_length=10, null=True)),
                ("subject", models.CharField(max_length=100)),
                ("chapter", models.CharField(blank=True, max_length=200, null=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("duration", models.CharField(blank=True, max_length=50, null=True)),
                ("sessiontype", models.TextField(db_column="sessionType")),
                ("createdat", models.DateTimeField(db_column="createdAt")),
                ("updatedat", models.DateTimeField(db_column="updatedAt")),
            ],
            options={
                "db_table": "class_schedule",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ContentAttempts",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("content_type", models.TextField()),
                ("state", models.TextField()),
                ("remaining_time", models.TextField(blank=True, null=True)),
                ("user_content_id", models.IntegerField(blank=True, null=True)),
                ("correct_answers_count", models.IntegerField(blank=True, null=True)),
                ("incorrect_answers_count", models.IntegerField(blank=True, null=True)),
                ("created", models.DateTimeField()),
                ("completed_on", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "content_attempts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Coursebatch",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "_CourseBatch",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Courses",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.TextField()),
                ("slug", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("image_url", models.TextField(blank=True, null=True)),
                ("is_public", models.BooleanField(blank=True, null=True)),
                ("created", models.DateTimeField(blank=True, null=True)),
                ("modified", models.DateTimeField(blank=True, null=True)),
                ("enable_progressive_lock", models.BooleanField(blank=True, null=True)),
                ("order_index", models.IntegerField(blank=True, null=True)),
                ("chapters_count", models.IntegerField()),
                ("contents_count", models.IntegerField()),
                ("exams_count", models.IntegerField()),
                ("videos_count", models.IntegerField()),
                ("attachments_count", models.IntegerField()),
                ("html_contents_count", models.IntegerField()),
                ("max_allowed_views_per_video", models.IntegerField(blank=True, null=True)),
                ("max_allowed_watch_minutes", models.IntegerField(blank=True, null=True)),
                ("created_by", models.IntegerField(blank=True, null=True)),
                ("video_conferences_count", models.IntegerField()),
            ],
            options={
                "db_table": "courses",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DailySummary",
            fields=[
                ("fetch_date", models.DateField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField()),
                ("total_students_fetched", models.IntegerField(blank=True, null=True)),
                (
                    "execution_time_seconds",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
                ),
            ],
            options={
                "db_table": "daily_summary",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DifficultyLevelStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("difficulty_level", models.TextField(blank=True, null=True)),
                ("correct_answers_count", models.IntegerField(blank=True, null=True)),
                ("incorrect_answers_count", models.IntegerField(blank=True, null=True)),
                ("partial_correct_answers_count", models.IntegerField(blank=True, null=True)),
                ("unanswered_count", models.IntegerField(blank=True, null=True)),
                ("total_count", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "difficulty_level_stats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Examcourse",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "_ExamCourse",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ExamQuestions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("questionid", models.IntegerField(db_column="questionId")),
                ("questionhtml", models.TextField(db_column="questionHtml")),
                (
                    "explanationhtml",
                    models.TextField(blank=True, db_column="explanationHtml", null=True),
                ),
                ("reference", models.TextField(blank=True, null=True)),
                ("type", models.TextField()),
                ("marks", models.FloatField()),
                ("negativemarks", models.FloatField(db_column="negativeMarks")),
                (
                    "partialmarks",
                    models.FloatField(blank=True, db_column="partialMarks", null=True),
                ),
                ("direction", models.TextField(blank=True, null=True)),
                ("order", models.IntegerField()),
                ("isbonus", models.BooleanField(db_column="isBonus")),
                ("examid", models.IntegerField(db_column="examId")),
            ],
            options={
                "db_table": "exam_questions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Exams",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("slug", models.TextField(unique=True)),
                ("title", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("duration", models.IntegerField()),
                ("enable_ranks", models.BooleanField(blank=True, null=True)),
                (
                    "mark_per_question",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
                ),
                (
                    "negative_marks",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
                ),
                ("number_of_questions", models.IntegerField()),
                ("pass_percentage", models.IntegerField(blank=True, null=True)),
                ("published", models.BooleanField(blank=True, null=True)),
                ("show_score", models.BooleanField(blank=True, null=True)),
                ("show_percentile", models.BooleanField(blank=True, null=True)),
                ("show_pass_or_fail", models.BooleanField(blank=True, null=True)),
                (
                    "total_marks",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
                ),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("created", models.DateTimeField()),
                ("modified", models.DateTimeField()),
            ],
            options={
                "db_table": "exams",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FacultySchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("date", models.DateField()),
                ("facultyname", models.CharField(db_column="facultyName", max_length=100)),
                (
                    "sessiontype",
                    models.CharField(blank=True, db_column="sessionType", max_length=50, null=True),
                ),
                (
                    "subcolumn",
                    models.CharField(blank=True, db_column="subColumn", max_length=50, null=True),
                ),
                (
                    "timeslot",
                    models.CharField(blank=True, db_column="timeSlot", max_length=50, null=True),
                ),
                (
                    "activitytype",
                    models.CharField(
                        blank=True, db_column="activityType", max_length=50, null=True
                    ),
                ),
                ("details", models.TextField()),
                ("createdat", models.DateTimeField(db_column="createdAt")),
                ("updatedat", models.DateTimeField(db_column="updatedAt")),
            ],
            options={
                "db_table": "faculty_schedule",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LiveStreams",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.TextField()),
                ("stream_url", models.TextField(blank=True, null=True)),
                ("duration", models.IntegerField(blank=True, null=True)),
                ("show_recorded_video", models.BooleanField()),
                ("status", models.TextField()),
                ("chat_embed_url", models.TextField(blank=True, null=True)),
                ("created", models.DateTimeField()),
                ("modified", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "live_streams",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Mentors",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("username", models.TextField(unique=True)),
                ("email", models.TextField(blank=True, null=True)),
                ("first_name", models.TextField(blank=True, null=True)),
                ("last_name", models.TextField(blank=True, null=True)),
                ("display_name", models.TextField(blank=True, null=True)),
                ("gender", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("created", models.DateTimeField()),
                ("students_url", models.TextField(blank=True, null=True)),
                ("students_count", models.IntegerField()),
                ("user_id", models.IntegerField(blank=True, null=True, unique=True)),
                ("hierarchy", models.TextField()),
                ("supervisor_email", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "mentors",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Mentortostudent",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "_MentorToStudent",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Sections",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("order", models.IntegerField()),
                ("name", models.TextField()),
            ],
            options={
                "db_table": "sections",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StudentActivities",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("student_id", models.CharField(blank=True, max_length=50, null=True)),
                ("timestamp", models.DateTimeField()),
                ("current_streak", models.IntegerField(blank=True, null=True)),
                ("highest_streak", models.IntegerField(blank=True, null=True)),
                ("last_completed_date", models.CharField(blank=True, max_length=50, null=True)),
                ("total_videos_watched", models.IntegerField(blank=True, null=True)),
                ("total_exams_taken", models.IntegerField(blank=True, null=True)),
                ("total_attachments_downloaded", models.IntegerField(blank=True, null=True)),
                ("total_video_conferences", models.IntegerField(blank=True, null=True)),
                ("fetch_date", models.DateField()),
            ],
            options={
                "db_table": "student_activities",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StudentActivityDates",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("student_id", models.CharField(max_length=50)),
                ("activity_date", models.DateField()),
            ],
            options={
                "db_table": "student_activity_dates",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Students",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("username", models.TextField(unique=True)),
                ("password_hash", models.TextField(blank=True, null=True)),
                ("first_name", models.TextField(blank=True, null=True)),
                ("last_name", models.TextField(blank=True, null=True)),
                ("display_name", models.TextField(blank=True, null=True)),
                ("email", models.TextField(blank=True, null=True)),
                ("photo", models.TextField(blank=True, null=True)),
                ("birth_date", models.TextField(blank=True, null=True)),
                ("address1", models.TextField(blank=True, null=True)),
                ("address2", models.TextField(blank=True, null=True)),
                ("city", models.TextField(blank=True, null=True)),
                ("zip", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
                ("created", models.DateTimeField(blank=True, null=True)),
                ("modified", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField()),
                ("large_image", models.TextField(blank=True, null=True)),
                ("medium_image", models.TextField(blank=True, null=True)),
                ("medium_small_image", models.TextField(blank=True, null=True)),
                ("small_image", models.TextField(blank=True, null=True)),
                ("x_small_image", models.TextField(blank=True, null=True)),
                ("mini_image", models.TextField(blank=True, null=True)),
                ("batches_url", models.TextField(blank=True, null=True)),
                ("gender_code", models.TextField(blank=True, null=True)),
                ("gender", models.TextField(blank=True, null=True)),
                ("state_code", models.TextField(blank=True, null=True)),
                ("last_active_date", models.DateTimeField(blank=True, null=True)),
                ("streak", models.IntegerField(blank=True, null=True)),
                ("highest_streak", models.IntegerField(blank=True, null=True)),
                ("last_parent_call", models.DateTimeField(blank=True, null=True)),
                ("last_student_call", models.DateTimeField(blank=True, null=True)),
                ("parent_number", models.TextField(blank=True, null=True)),
                ("total_parent_call_count", models.IntegerField(blank=True, null=True)),
                ("total_parent_call_verified", models.IntegerField(blank=True, null=True)),
                ("total_student_call_count", models.IntegerField(blank=True, null=True)),
                ("total_student_call_verified", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "students",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SubjectStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("subject_id", models.IntegerField(blank=True, null=True)),
                ("subject_name", models.TextField(blank=True, null=True)),
                ("total_count", models.IntegerField(blank=True, null=True)),
                ("correct_answers_count", models.IntegerField(blank=True, null=True)),
                ("unanswered_count", models.IntegerField(blank=True, null=True)),
                ("incorrect_answers_count", models.IntegerField(blank=True, null=True)),
                ("parent_subject_id", models.IntegerField(blank=True, null=True)),
                ("is_leaf", models.BooleanField(blank=True, null=True)),
                ("score", models.TextField(blank=True, null=True)),
                ("partial_correct_answers_count", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "subject_stats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserAnswerAttemptSections",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("order", models.IntegerField()),
                ("sectionname", models.TextField(db_column="sectionName")),
                ("timetaken", models.TextField(db_column="timeTaken")),
                ("correctanswerscount", models.IntegerField(db_column="correctAnswersCount")),
                ("incorrectanswerscount", models.IntegerField(db_column="incorrectAnswersCount")),
                ("unansweredcount", models.IntegerField(db_column="unansweredCount")),
                ("score", models.FloatField()),
                ("state", models.TextField()),
                (
                    "remainingtime",
                    models.TextField(blank=True, db_column="remainingTime", null=True),
                ),
            ],
            options={
                "db_table": "user_answer_attempt_sections",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserAnswers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "adaptivequestionpoolid",
                    models.IntegerField(blank=True, db_column="adaptiveQuestionPoolId", null=True),
                ),
                (
                    "selectedanswers",
                    models.TextField(blank=True, db_column="selectedAnswers", null=True),
                ),
                ("userresponse", models.TextField(blank=True, db_column="userResponse", null=True)),
                ("result", models.TextField()),
                ("duration", models.IntegerField()),
                ("review", models.BooleanField(blank=True, null=True)),
                ("guessed", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "user_answers",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserConferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("join_time", models.DateTimeField(blank=True, null=True)),
                ("leave_time", models.DateTimeField(blank=True, null=True)),
                ("duration", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "user_conferences",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserLiveStreams",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("user_id", models.IntegerField()),
                ("created", models.DateTimeField()),
                ("modified", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "user_live_streams",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserVideoProgress",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("created", models.DateTimeField(blank=True, null=True)),
                (
                    "watched_percentage",
                    models.DecimalField(blank=True, decimal_places=30, max_digits=65, null=True),
                ),
                (
                    "watchedduration",
                    models.IntegerField(blank=True, db_column="watchedDuration", null=True),
                ),
            ],
            options={
                "db_table": "user_video_progress",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserVideos",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("created", models.DateTimeField()),
                ("watched_percentage", models.IntegerField()),
                ("remaining_duration", models.TextField(blank=True, null=True)),
                ("state", models.TextField()),
                ("is_live_class_recording", models.BooleanField()),
            ],
            options={
                "db_table": "user_videos",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VideoConferences",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("title", models.TextField()),
                ("conference_id", models.TextField()),
                ("start", models.DateTimeField()),
                ("duration", models.IntegerField()),
                ("provider", models.TextField()),
                ("join_url", models.TextField()),
                ("password", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("access_token", models.TextField(blank=True, null=True)),
                ("created", models.DateTimeField()),
                ("modified", models.DateTimeField(blank=True, null=True)),
                ("has_recording_expired", models.BooleanField()),
                ("show_recorded_video", models.BooleanField()),
                ("state", models.TextField()),
            ],
            options={
                "db_table": "video_conferences",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Videos",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("title", models.TextField()),
                ("url", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("duration", models.TextField(blank=True, null=True)),
                (
                    "required_watch_duration",
                    models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True),
                ),
                ("is_domain_restricted", models.BooleanField()),
                ("embed_code", models.TextField(blank=True, null=True)),
                ("course_title", models.TextField(blank=True, null=True)),
                ("chapter_name", models.TextField(blank=True, null=True)),
                ("content_created_date", models.DateTimeField(blank=True, null=True)),
                (
                    "totalduration",
                    models.IntegerField(blank=True, db_column="totalDuration", null=True),
                ),
                ("transcoded_video", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "videos",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LMSActivityEvent",
            fields=[
                ("event_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("exam_started", "Exam Started"),
                            ("exam_completed", "Exam Completed"),
                            ("exam_failed", "Exam Failed"),
                            ("exam_passed", "Exam Passed"),
                            ("content_started", "Content Started"),
                            ("content_completed", "Content Completed"),
                            ("content_watched", "Content Watched"),
                        ],
                        max_length=50,
                    ),
                ),
                ("student_id", models.IntegerField(help_text="Student ID from LMS database")),
                ("student_username", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "mentor_id",
                    models.IntegerField(
                        blank=True, help_text="Mentor ID from LMS database", null=True
                    ),
                ),
                ("mentor_username", models.CharField(blank=True, max_length=255, null=True)),
                ("activity_id", models.IntegerField(help_text="Exam or content ID from LMS")),
                ("activity_title", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "activity_metadata",
                    models.JSONField(
                        blank=True,
                        help_text="Additional data like scores, percentage, duration, etc.",
                        null=True,
                    ),
                ),
                ("timestamp", models.DateTimeField(help_text="When the activity occurred in LMS")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "processed_for_ai",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this event has been processed for AI analysis",
                    ),
                ),
                (
                    "zulip_user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Zulip UserProfile ID if student has Zulip account",
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "lms_activity_events",
                "ordering": ["-timestamp"],
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="LMSEventLog",
            fields=[
                (
                    "event",
                    models.OneToOneField(
                        help_text="The LMS activity event this log entry refers to",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lms_integration.lmsactivityevent",
                    ),
                ),
                ("notification_sent", models.BooleanField(default=False)),
                (
                    "notification_message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Zulip message ID of the notification sent to mentor",
                        null=True,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error details if processing failed", null=True
                    ),
                ),
                ("processed_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "lms_event_logs",
                "ordering": ["-processed_at"],
                "managed": True,
            },
        ),
        migrations.AddIndex(
            model_name="lmsactivityevent",
            index=models.Index(fields=["student_id"], name="lms_activit_student_c7a329_idx"),
        ),
        migrations.AddIndex(
            model_name="lmsactivityevent",
            index=models.Index(fields=["event_type"], name="lms_activit_event_t_ff9bbf_idx"),
        ),
        migrations.AddIndex(
            model_name="lmsactivityevent",
            index=models.Index(fields=["timestamp"], name="lms_activit_timesta_bcc866_idx"),
        ),
        migrations.AddIndex(
            model_name="lmsactivityevent",
            index=models.Index(fields=["processed_for_ai"], name="lms_activit_process_19da29_idx"),
        ),
    ]
