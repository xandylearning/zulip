name: Zulip CD - Docker Build and Cloud Run Deploy

on:
  push:
    branches: [dev, master]
    tags: ["*"]
  pull_request:
    branches: [dev, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-south1
  REPOSITORY: zulip
  SERVICE_NAME: zulip-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Google Cloud credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Generate image tag
        id: image-tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "tag=pr-${{ github.event.number }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/zulip:${{ steps.image-tag.outputs.tag }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/zulip:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ZULIP_GIT_REF=${{ github.sha }}

      - name: Deploy to Cloud Run (Staging)
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev' || github.event.inputs.environment == 'staging'
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}-staging
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/zulip:${{ steps.image-tag.outputs.tag }}
          region: ${{ env.REGION }}
          env_vars: |
            ZULIP_ENVIRONMENT=staging
            POSTGRES_HOST=${{ secrets.STAGING_POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.STAGING_POSTGRES_PORT }}
            POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}
            POSTGRES_SSLMODE=${{ secrets.STAGING_POSTGRES_SSLMODE }}
          secrets: |
            ZULIP_SECRETS_KEY=${{ secrets.ZULIP_SECRETS_KEY }}
          flags: |
            --allow-unauthenticated
            --port=80
            --memory=2Gi
            --cpu=2
            --max-instances=10
            --min-instances=0
            --concurrency=80
            --timeout=300

      - name: Deploy to Cloud Run (Production)
        if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.environment == 'production'
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}-prod
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/zulip:${{ steps.image-tag.outputs.tag }}
          region: ${{ env.REGION }}
          env_vars: |
            ZULIP_ENVIRONMENT=production
            POSTGRES_HOST=${{ secrets.PROD_POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.PROD_POSTGRES_PORT }}
            POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
            POSTGRES_SSLMODE=${{ secrets.PROD_POSTGRES_SSLMODE }}
          secrets: |
            ZULIP_SECRETS_KEY=${{ secrets.ZULIP_SECRETS_KEY }}
          flags: |
            --allow-unauthenticated
            --port=80
            --memory=4Gi
            --cpu=4
            --max-instances=4
            --min-instances=1
            --concurrency=100
            --timeout=300

      - name: Show service URLs
        run: |
          echo "Staging URL: https://${{ env.SERVICE_NAME }}-staging-${{ env.PROJECT_ID }}-${{ env.REGION }}.a.run.app"
          echo "Production URL: https://${{ env.SERVICE_NAME }}-prod-${{ env.PROJECT_ID }}-${{ env.REGION }}.a.run.app"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Google Cloud credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Run vulnerability scan
        run: |
          gcloud artifacts docker images scan \
            --image="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/zulip:latest" \
            --location=${{ env.REGION }}

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, security-scan]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Staging: https://${{ env.SERVICE_NAME }}-staging-${{ env.PROJECT_ID }}-${{ env.REGION }}.a.run.app"
            echo "Production: https://${{ env.SERVICE_NAME }}-prod-${{ env.PROJECT_ID }}-${{ env.REGION }}.a.run.app"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
