#!/usr/bin/env python3
"""
Test runner for AI Agent System

This script runs the comprehensive AI agent test suite.
"""

import argparse
import os
import sys
import subprocess
from typing import List


def run_test_module(module_name: str, verbose: bool = False) -> int:
    """Run a specific test module"""
    cmd = ["./tools/test-backend", f"zerver.tests.{module_name}"]

    if verbose:
        cmd.append("--verbose")

    print(f"Running {module_name}...")
    result = subprocess.run(cmd, cwd="/srv/zulip")
    return result.returncode


def run_all_ai_tests(verbose: bool = False) -> int:
    """Run all AI-related tests"""

    test_modules = [
        "test_ai_agent_integration",
        "test_ai_event_system",
        "test_ai_agent_core"
    ]

    print("🚀 Running AI Agent Test Suite")
    print("=" * 50)

    failed_tests = []
    total_tests = len(test_modules)

    for i, module in enumerate(test_modules, 1):
        print(f"\n[{i}/{total_tests}] Testing {module}")
        print("-" * 40)

        try:
            result = run_test_module(module, verbose)
            if result != 0:
                failed_tests.append(module)
                print(f"❌ {module} FAILED")
            else:
                print(f"✅ {module} PASSED")
        except Exception as e:
            print(f"💥 {module} CRASHED: {e}")
            failed_tests.append(module)

    print("\n" + "=" * 50)
    print("🎯 AI Agent Test Results")
    print("=" * 50)

    if failed_tests:
        print(f"❌ Failed Tests: {len(failed_tests)}/{total_tests}")
        for test in failed_tests:
            print(f"   - {test}")
        return 1
    else:
        print(f"✅ All Tests Passed: {total_tests}/{total_tests}")
        print("\n🎉 AI Agent System Tests Complete!")
        return 0


def run_integration_check() -> int:
    """Run integration check to verify AI system is working"""

    print("🔍 Running AI Integration Check")
    print("-" * 40)

    try:
        # Import test to verify system is importable
        sys.path.insert(0, '/srv/zulip')

        # Configure Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zproject.settings')
        import django
        django.setup()

        # Test core imports
        try:
            from zproject.ai_agent_settings import USE_LANGGRAPH_AGENTS
            print("✅ AI agent settings importable")
        except ImportError as e:
            print(f"❌ AI agent settings not importable: {e}")
            return 1

        try:
            from zerver.actions.ai_mentor_events import trigger_ai_agent_conversation
            print("✅ AI mentor events importable")
        except ImportError as e:
            print(f"❌ AI mentor events not importable: {e}")
            return 1

        try:
            from zerver.event_listeners.ai_mentor import handle_ai_agent_conversation
            print("✅ AI event listeners importable")
        except ImportError as e:
            print(f"❌ AI event listeners not importable: {e}")
            return 1

        try:
            from zerver.lib.ai_agent_core import AIAgentOrchestrator
            print("✅ AI agent core importable")
        except ImportError as e:
            print(f"⚠️  AI agent core not importable: {e}")
            print("   (This is expected if LangGraph dependencies are not installed)")

        print("\n✅ Integration Check Passed!")
        return 0

    except Exception as e:
        print(f"💥 Integration check failed: {e}")
        return 1


def main() -> int:
    parser = argparse.ArgumentParser(description="Test AI Agent System")
    parser.add_argument(
        "--module",
        help="Run specific test module (integration, event_system, or core)"
    )
    parser.add_argument(
        "--integration-check",
        action="store_true",
        help="Run integration check only"
    )
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Verbose test output"
    )

    args = parser.parse_args()

    if args.integration_check:
        return run_integration_check()
    elif args.module:
        module_map = {
            "integration": "test_ai_agent_integration",
            "event_system": "test_ai_event_system",
            "core": "test_ai_agent_core"
        }

        if args.module in module_map:
            return run_test_module(module_map[args.module], args.verbose)
        else:
            print(f"Unknown module: {args.module}")
            print(f"Available modules: {', '.join(module_map.keys())}")
            return 1
    else:
        return run_all_ai_tests(args.verbose)


if __name__ == "__main__":
    sys.exit(main())